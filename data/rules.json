[

    {
        "code": "C901",
        "message": "Function is too complex",
        "content": "<p>Functions that are deemed too complex are functions that have too much branching logic. Branching logic includes <code class=\"language-plaintext highlighter-rouge\">if</code>/<code class=\"language-plaintext highlighter-rouge\">elif</code>/<code class=\"language-plaintext highlighter-rouge\">else</code> and <code class=\"language-plaintext highlighter-rouge\">for</code>/<code class=\"language-plaintext highlighter-rouge\">while</code> loops.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p>The following example has a complexity score of 5, because there are five potential branches.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">post_comment</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">success</span><span class=\"p\">:</span>\n        <span class=\"n\">comment</span> <span class=\"o\">=</span> <span class=\"s\">'Build succeeded'</span>\n    <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">warning</span><span class=\"p\">:</span>\n        <span class=\"n\">comment</span> <span class=\"o\">=</span> <span class=\"s\">'Build had issues'</span>\n    <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">failed</span><span class=\"p\">:</span>\n        <span class=\"n\">comment</span> <span class=\"o\">=</span> <span class=\"s\">'Build failed'</span>\n\n    <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">success</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">comment</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s\">'success'</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">comment</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s\">'error'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<p>To reduce the complexity of a function you should make the function do less. In the example above, the function actually does two things: formats a comment and posts the comment. Let’s split that up into two specific functions that have only one task each.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">get_comment</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"n\">comments</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s\">'success'</span><span class=\"p\">:</span> <span class=\"s\">'Build succeeded'</span><span class=\"p\">,</span>\n        <span class=\"s\">'warning'</span><span class=\"p\">:</span> <span class=\"s\">'Build had issues'</span><span class=\"p\">,</span>\n        <span class=\"s\">'failed'</span><span class=\"p\">:</span> <span class=\"s\">'Build failed'</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">comments</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">type</span><span class=\"p\">]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">post_comment</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">comment</span><span class=\"p\">):</span>\n    <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">comment</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">type</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>These two functions now have a complexity of 1.</p>\n",
        "links": ["https://en.wikipedia.org/wiki/Cyclomatic_complexity"]
    },

    {
        "code": "E101",
        "message": "Indentation contains mixed spaces and tabs",
        "content": "<p>Indentation has both tabs and spaces in it. Programmers should use either tabs or spaces, but <a href=\"http://imgur.com/VyMu86F\">not both</a>.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p><strong>Note:</strong> The <code class=\"language-plaintext highlighter-rouge\">•</code> character represents a space and the <code class=\"language-plaintext highlighter-rouge\">→</code> character represents a tab.</p>\n\n<p>In this example, the third line contains four spaces and two tabs.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">get_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">first_name</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">last_name</span><span class=\"p\">:</span>\n<span class=\"err\">••••→</span> <span class=\"err\">→</span> <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">first_name</span> <span class=\"o\">+</span> <span class=\"s\">' '</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">last_name</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">last_name</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<p>Change the line to use spaces only.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">get_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">first_name</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">last_name</span><span class=\"p\">:</span>\n<span class=\"err\">••••••••</span><span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">first_name</span> <span class=\"o\">+</span> <span class=\"s\">' '</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">last_name</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">last_name</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#tabs-or-spaces"]
    },

    {
        "code": "E111",
        "message": "Indentation is not a multiple of four",
        "content": "<p>PEP8 recommends that Python code indentation be a multiple of four.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n  <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#indentation"]
    },

    {
        "code": "E112",
        "message": "Expected an indented block",
        "content": "<p>This issue occurs when code is not indented but should be.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">print_list</span><span class=\"p\">(</span><span class=\"n\">my_list</span><span class=\"p\">):</span>\n<span class=\"s\">\"\"\"This should be indented\"\"\"</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Nope'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<p>Indent the docstring by four spaces.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">print_list</span><span class=\"p\">(</span><span class=\"n\">my_list</span><span class=\"p\">):</span>\n    <span class=\"s\">\"\"\"This should be indented\"\"\"</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Nope'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#indentation"]
    },

    {
        "code": "E113",
        "message": "Unexpected indentation",
        "content": "<p>A line is indented when it shouldn’t be. Usually this will mean that multiple lines need to be indented at the same level.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p>In this example, the two <code class=\"language-plaintext highlighter-rouge\">print</code> statements do not have matching indentation.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">hello_world</span><span class=\"p\">():</span>\n  <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'hello'</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'world'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">hello_world</span><span class=\"p\">():</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'hello'</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'world'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#indentation"]
    },

    {
        "code": "E114",
        "message": "Indentation is not a multiple of four (comment)",
        "content": "<p>Comment indentation should be a multiple of four.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p>In the following example, the comment is indented with 5 spaces.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>     <span class=\"c1\"># 'httpd/unix-directory'\n</span><span class=\"n\">mimetype</span> <span class=\"o\">=</span> <span class=\"s\">'application/x-directory'</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"c1\"># 'httpd/unix-directory'\n</span><span class=\"n\">mimetype</span> <span class=\"o\">=</span> <span class=\"s\">'application/x-directory'</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#indentation"]
    },

    {
        "code": "E115",
        "message": "Expected an indented block (comment)",
        "content": "<p>An indented block comment was expected but a non-indented block comment was found instead.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">start</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n<span class=\"c1\">#       try:\n#           self.master.start()\n#       except MasterExit:\n#           self.shutdown()\n#       finally:\n#           sys.exit()\n</span>        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">master</span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">start</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n        <span class=\"c1\">#  try:\n</span>        <span class=\"c1\">#      self.master.start()\n</span>        <span class=\"c1\">#  except MasterExit:\n</span>        <span class=\"c1\">#      self.shutdown()\n</span>        <span class=\"c1\">#  finally:\n</span>        <span class=\"c1\">#      sys.exit()\n</span>        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">master</span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#indentation"]
    },

    {
        "code": "E116",
        "message": "Unexpected indentation (comment)",
        "content": "<p>Comments should be indented relative to the code in the block they are in.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"c1\"># 'httpd/unix-directory'\n</span><span class=\"n\">mimetype</span> <span class=\"o\">=</span> <span class=\"s\">'application/x-directory'</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># 'httpd/unix-directory'\n</span><span class=\"n\">mimetype</span> <span class=\"o\">=</span> <span class=\"s\">'application/x-directory'</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#indentation"]
    },

    {
        "code": "E117",
        "message": "Over-indented",
        "content": "<p>Code should have consistent indentation, typically spaced out in increments of two or four.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">print</code> function on the following line is indented at five spaces instead of four.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n     <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Hi there'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<p>The code is now spaced out at four spaces instead of five.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Hi there'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#indentation"]
    },

    {
        "code": "E121",
        "message": "Continuation line under-indented for hanging indent",
        "content": "<p>A line is less indented than it should be for hanging indents.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p>In the first example, the keys of this <code class=\"language-plaintext highlighter-rouge\">dict</code> are only indented with 3 spaces. They should be indented with 4 spaces.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n   <span class=\"s\">'key1'</span><span class=\"p\">:</span> <span class=\"s\">'value'</span><span class=\"p\">,</span>\n   <span class=\"s\">'key2'</span><span class=\"p\">:</span> <span class=\"s\">'value'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">'key1'</span><span class=\"p\">:</span> <span class=\"s\">'value'</span><span class=\"p\">,</span>\n    <span class=\"s\">'key2'</span><span class=\"p\">:</span> <span class=\"s\">'value'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"anti-pattern-1\">Anti-pattern</h3>\n\n<p>In this example, the second line is only indented with 2 spaces. It should be indented with 4 spaces.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Python\"</span><span class=\"p\">,</span> <span class=\"p\">(</span>\n  <span class=\"s\">\"Rules\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice-1\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Python\"</span><span class=\"p\">,</span> <span class=\"p\">(</span>\n    <span class=\"s\">\"Rules\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#indentation"]
    },

    {
        "code": "E122",
        "message": "Continuation line missing indentation or outdented",
        "content": "<p>A continuation line is not indented as far as it should be or is indented too far.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p>In this example the second line is missing indentation.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Python\"</span><span class=\"p\">,</span> <span class=\"p\">(</span>\n<span class=\"s\">\"Rules\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Python\"</span><span class=\"p\">,</span> <span class=\"p\">(</span>\n    <span class=\"s\">\"Rules\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#indentation"]
    },

    {
        "code": "E123",
        "message": "Closing bracket does not match indentation of opening bracket's line",
        "content": "<p>Closing brackets should match the same indentation level of the line that their opening bracket started on.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p>In this example the last line should be indented at the same level as the first line.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">function_that_takes_arguments</span><span class=\"p\">(</span>\n    <span class=\"s\">'a'</span><span class=\"p\">,</span> <span class=\"s\">'b'</span><span class=\"p\">,</span> <span class=\"s\">'c'</span><span class=\"p\">,</span>\n    <span class=\"s\">'d'</span><span class=\"p\">,</span> <span class=\"s\">'e'</span><span class=\"p\">,</span> <span class=\"s\">'f'</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">function_that_takes_arguments</span><span class=\"p\">(</span>\n    <span class=\"s\">'a'</span><span class=\"p\">,</span> <span class=\"s\">'b'</span><span class=\"p\">,</span> <span class=\"s\">'c'</span><span class=\"p\">,</span>\n    <span class=\"s\">'d'</span><span class=\"p\">,</span> <span class=\"s\">'e'</span><span class=\"p\">,</span> <span class=\"s\">'f'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#indentation"]
    },

    {
        "code": "E124",
        "message": "Closing bracket does not match visual indentation",
        "content": "<p>Closing brackets should match the indentation of the opening bracket.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">function_that_takes_arguments</span><span class=\"p\">(</span><span class=\"s\">'a'</span><span class=\"p\">,</span> <span class=\"s\">'b'</span><span class=\"p\">,</span> <span class=\"s\">'c'</span><span class=\"p\">,</span>\n                                       <span class=\"s\">'d'</span><span class=\"p\">,</span> <span class=\"s\">'e'</span><span class=\"p\">,</span> <span class=\"s\">'f'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">function_that_takes_arguments</span><span class=\"p\">(</span><span class=\"s\">'a'</span><span class=\"p\">,</span> <span class=\"s\">'b'</span><span class=\"p\">,</span> <span class=\"s\">'c'</span><span class=\"p\">,</span>\n                                       <span class=\"s\">'d'</span><span class=\"p\">,</span> <span class=\"s\">'e'</span><span class=\"p\">,</span> <span class=\"s\">'f'</span><span class=\"p\">,</span>\n                                       <span class=\"p\">)</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#indentation"]
    },

    {
        "code": "E125",
        "message": "Continuation line with same indent as next logical line",
        "content": "<p>Continuation lines should not be indented at the same level as the next logical line. Instead, they should be indented to one more level so as to distinguish them from the next line.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p>In this example the second line is indented at the same level as the line below it. This makes it difficult to tell what is in the <code class=\"language-plaintext highlighter-rouge\">if</code> block and what is a part of the boolean expression.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"n\">user</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span> <span class=\"ow\">and</span> <span class=\"n\">user</span><span class=\"p\">.</span><span class=\"n\">is_admin</span> <span class=\"ow\">or</span> \\\n    <span class=\"n\">user</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s\">'Grant'</span><span class=\"p\">:</span>\n    <span class=\"n\">blah</span> <span class=\"o\">=</span> <span class=\"s\">'yeahnah'</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"n\">user</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span> <span class=\"ow\">and</span> <span class=\"n\">user</span><span class=\"p\">.</span><span class=\"n\">is_admin</span> <span class=\"ow\">or</span> \\\n        <span class=\"n\">user</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s\">'Grant'</span><span class=\"p\">:</span>\n    <span class=\"n\">blah</span> <span class=\"o\">=</span> <span class=\"s\">'yeahnah'</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#indentation"]
    },

    {
        "code": "E126",
        "message": "Continuation line over-indented for hanging indent",
        "content": "<p>A continuation line is indented farther than it should be for a hanging indent.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Python\"</span><span class=\"p\">,</span> <span class=\"p\">(</span>\n        <span class=\"s\">\"Rules\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Python\"</span><span class=\"p\">,</span> <span class=\"p\">(</span>\n    <span class=\"s\">\"Rules\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#indentation"]
    },

    {
        "code": "E127",
        "message": "Continuation line over-indented for visual indent",
        "content": "<p>A continuation line is indented farther than it should be for a visual indent.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p>In this example, the string <code class=\"language-plaintext highlighter-rouge\">\"World\"</code> is indented two spaces farther than it should be.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Python\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">\"Hello\"</span><span class=\"p\">,</span>\n                   <span class=\"s\">\"World\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Python\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">\"Hello\"</span><span class=\"p\">,</span>\n                 <span class=\"s\">\"World\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#indentation"]
    },

    {
        "code": "E128",
        "message": "Continuation line under-indented for visual indent",
        "content": "<p>A continuation line is under-indented for a visual indentation.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p>In this example the string <code class=\"language-plaintext highlighter-rouge\">\"World\"</code> is under-indented by two spaces.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Python\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">\"Hello\"</span><span class=\"p\">,</span>\n               <span class=\"s\">\"World\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Python\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">\"Hello\"</span><span class=\"p\">,</span>\n                 <span class=\"s\">\"World\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#indentation"]
    },

    {
        "code": "E129",
        "message": "Visually indented line with same indent as next logical line",
        "content": "<p>A visual indented line has the same indentation as the next logical line. This can make it hard to read.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p>In this example the second line is indented at the same level as the body of the <code class=\"language-plaintext highlighter-rouge\">if</code> statement.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">row</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"ow\">or</span> <span class=\"n\">module_count</span> <span class=\"o\">&lt;=</span> <span class=\"n\">row</span> <span class=\"ow\">or</span>\n    <span class=\"n\">col</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"ow\">or</span> <span class=\"n\">module_count</span> <span class=\"o\">&lt;=</span> <span class=\"n\">col</span><span class=\"p\">):</span>\n    <span class=\"k\">raise</span> <span class=\"nb\">Exception</span><span class=\"p\">(</span><span class=\"s\">\"%s,%s - %s\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">moduleCount</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">row</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"ow\">or</span> <span class=\"n\">module_count</span> <span class=\"o\">&lt;=</span> <span class=\"n\">row</span> <span class=\"ow\">or</span>\n        <span class=\"n\">col</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"ow\">or</span> <span class=\"n\">module_count</span> <span class=\"o\">&lt;=</span> <span class=\"n\">col</span><span class=\"p\">):</span>\n    <span class=\"k\">raise</span> <span class=\"nb\">Exception</span><span class=\"p\">(</span><span class=\"s\">\"%s,%s - %s\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">moduleCount</span><span class=\"p\">))</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#indentation"]
    },

    {
        "code": "E131",
        "message": "Continuation line unaligned for hanging indent",
        "content": "<p>A continuation line is unaligned for hanging indent.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">my_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"key\"</span><span class=\"p\">:</span> <span class=\"s\">\"value\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"long\"</span><span class=\"p\">:</span> <span class=\"s\">\"the quick brown fox jumps over the \"</span>\n        <span class=\"s\">\"lazy dog\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">my_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"key\"</span><span class=\"p\">:</span> <span class=\"s\">\"value\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"long\"</span><span class=\"p\">:</span> <span class=\"s\">\"the quick brown fox jumps over the \"</span>\n            <span class=\"s\">\"lazy dog\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#indentation"]
    },

    {
        "code": "E133",
        "message": "Closing bracket is missing indentation",
        "content": "<p>A closing bracket is missing indentation. This error only occurs if the <code class=\"language-plaintext highlighter-rouge\">--hang-closing</code> flag is used, switching the default behavior of closing brackets so that they require hanging indents.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p><strong>Note:</strong> This is not an anti-pattern by default. This only occurs if the <code class=\"language-plaintext highlighter-rouge\">--hang-closing</code> flag is used.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">my_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n    <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">my_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n    <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#indentation"]
    },

    {
        "code": "E201",
        "message": "Whitespace after '('",
        "content": "<p>Open parentheses should not have any space before or after them.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># The space after open is unnecessary\n</span><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span> <span class=\"s\">'file.dat'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">contents</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">'file.dat'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">contents</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#pet-peeves"]
    },

    {
        "code": "E202",
        "message": "Whitespace before ')'",
        "content": "<p>Closing parentheses should not have any whitespace before them.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">'file.dat'</span> <span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">contents</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">'file.dat'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">contents</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#pet-peeves"]
    },

    {
        "code": "E203",
        "message": "Whitespace before ':'",
        "content": "<p>Colons should not have any space before them.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">'file.dat'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span> <span class=\"p\">:</span>\n    <span class=\"n\">contents</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">'file.dat'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">contents</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#pet-peeves"]
    },

    {
        "code": "E211",
        "message": "Whitespace before '('",
        "content": "<p>Open parentheses should not have any space before or after them.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># The space after open is unnecessary\n</span><span class=\"k\">with</span> <span class=\"nb\">open</span> <span class=\"p\">(</span><span class=\"s\">'file.dat'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">contents</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">'file.dat'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">contents</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#pet-peeves"]
    },

    {
        "code": "E221",
        "message": "Multiple spaces before operator",
        "content": "<p>There should be only one space before an operator.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># There are two spaces before the multiplication operator\n</span><span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">doubled</span> <span class=\"o\">=</span> <span class=\"n\">num</span>  <span class=\"o\">*</span> <span class=\"mi\">2</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">doubled</span> <span class=\"o\">=</span> <span class=\"n\">num</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#pet-peeves"]
    },

    {
        "code": "E222",
        "message": "Multiple spaces after operator",
        "content": "<p>There should be only one space after an operator.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># There are two spaces after the multiplication operator\n</span><span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">doubled</span> <span class=\"o\">=</span> <span class=\"n\">num</span> <span class=\"o\">*</span>  <span class=\"mi\">2</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">doubled</span> <span class=\"o\">=</span> <span class=\"n\">num</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#pet-peeves"]
    },

    {
        "code": "E223",
        "message": "Tab before operator",
        "content": "<p>There should be only one space before or after operators.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p><strong>Note:</strong> The <code class=\"language-plaintext highlighter-rouge\">→</code> character represents a tab.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"err\">→</span><span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#pet-peeves"]
    },

    {
        "code": "E224",
        "message": "Tab after operator",
        "content": "<p>There should be only one space before or after operators.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p><strong>Note:</strong> The <code class=\"language-plaintext highlighter-rouge\">→</code> character represents a tab.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"ow\">in</span><span class=\"err\">→</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#pet-peeves"]
    },

    {
        "code": "E225",
        "message": "Missing whitespace around operator",
        "content": "<p>There should be one space before and after all operators.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"n\">age</span><span class=\"o\">&gt;</span><span class=\"mi\">15</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Can drive'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"n\">age</span> <span class=\"o\">&gt;</span> <span class=\"mi\">15</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Can drive'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#pet-peeves"]
    },

    {
        "code": "E226",
        "message": "Missing whitespace around arithmetic operator",
        "content": "<p>There should be one space before and after an arithmetic operator (<code class=\"language-plaintext highlighter-rouge\">+</code>, <code class=\"language-plaintext highlighter-rouge\">-</code>, <code class=\"language-plaintext highlighter-rouge\">/</code>, and <code class=\"language-plaintext highlighter-rouge\">*</code>).</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"o\">+</span><span class=\"mi\">15</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"mi\">10</span> <span class=\"o\">+</span> <span class=\"mi\">15</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#pet-peeves"]
    },

    {
        "code": "E227",
        "message": "Missing whitespace around bitwise or shift operator",
        "content": "<p>There should be one space before and after bitwise and shift operators (<code class=\"language-plaintext highlighter-rouge\">&lt;&lt;</code>, <code class=\"language-plaintext highlighter-rouge\">&gt;&gt;</code>, <code class=\"language-plaintext highlighter-rouge\">&amp;</code>, <code class=\"language-plaintext highlighter-rouge\">|</code>, <code class=\"language-plaintext highlighter-rouge\">^</code>).</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">128</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">1</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">128</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#pet-peeves"]
    },

    {
        "code": "E228",
        "message": "Missing whitespace around modulo operator",
        "content": "<p>The modulo operator (<code class=\"language-plaintext highlighter-rouge\">%</code>) should have whitespace on either side of it.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">remainder</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"o\">%</span><span class=\"mi\">2</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">remainder</span> <span class=\"o\">=</span> <span class=\"mi\">10</span> <span class=\"o\">%</span> <span class=\"mi\">2</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#pet-peeves"]
    },

    {
        "code": "E231",
        "message": "Missing whitespace after ',', ';', or ':'",
        "content": "<p>There should be whitespace after the characters <code class=\"language-plaintext highlighter-rouge\">,</code>, <code class=\"language-plaintext highlighter-rouge\">;</code>, and <code class=\"language-plaintext highlighter-rouge\">:</code>.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">my_tuple</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">my_tuple</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#pet-peeves"]
    },

    {
        "code": "E241",
        "message": "Multiple spaces after ','",
        "content": "<p>There should be only one space after the  <code class=\"language-plaintext highlighter-rouge\">,</code> character.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p>In this example there are two spaces after the comma</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">my_tuple</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span>  <span class=\"mi\">2</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">my_tuple</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#pet-peeves"]
    },

    {
        "code": "E242",
        "message": "Tab after ','",
        "content": "<p>There should be only one space after the <code class=\"language-plaintext highlighter-rouge\">,</code> character.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p><strong>Note:</strong> The <code class=\"language-plaintext highlighter-rouge\">→</code> character represents a tab.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">my_tuple</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"err\">→</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"err\">→</span><span class=\"mi\">3</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">my_tuple</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#pet-peeves"]
    },

    {
        "code": "E251",
        "message": "Unexpected spaces around keyword / parameter equals",
        "content": "<p>There should be no spaces before or after the <code class=\"language-plaintext highlighter-rouge\">=</code> in a function definition.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">key1</span> <span class=\"o\">=</span> <span class=\"s\">'val1'</span><span class=\"p\">,</span>\n         <span class=\"n\">key2</span> <span class=\"o\">=</span> <span class=\"s\">'val2'</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">key1</span><span class=\"p\">,</span> <span class=\"n\">key2</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">key1</span><span class=\"o\">=</span><span class=\"s\">'val1'</span><span class=\"p\">,</span>\n         <span class=\"n\">key2</span><span class=\"o\">=</span><span class=\"s\">'val2'</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">key1</span><span class=\"p\">,</span> <span class=\"n\">key2</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#other-recommendations"]
    },

    {
        "code": "E261",
        "message": "At least two spaces before inline comment",
        "content": "<p>Inline comments should have two spaces before them. Often programmers will only include one space, which will trigger this warning.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">print_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"c1\"># This comment needs an extra space\n</span></code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">print_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>  <span class=\"c1\"># Comment is correct now\n</span></code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#inline-comments"]
    },

    {
        "code": "E262",
        "message": "Inline comment should start with '# '",
        "content": "<p>Inline comments should have one space before the pound sign (<code class=\"language-plaintext highlighter-rouge\">#</code>) and the comment itself.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">print_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>  <span class=\"c1\">#This comment needs a space\n</span></code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">print_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>  <span class=\"c1\"># Comment is correct now\n</span></code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#inline-comments"]
    },

    {
        "code": "E265",
        "message": "Block comment should start with '# '",
        "content": "<p>Block comments should have one space before the pound sign (<code class=\"language-plaintext highlighter-rouge\">#</code>) and the comment itself.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">#This comment needs a space\n</span><span class=\"k\">def</span> <span class=\"nf\">print_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Comment is correct now\n</span><span class=\"k\">def</span> <span class=\"nf\">print_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#block-comments"]
    },

    {
        "code": "E266",
        "message": "Too many leading '#' for block comment",
        "content": "<p>There should be only one leading <code class=\"language-plaintext highlighter-rouge\">#</code> for a block comment.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">## Prints hello\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'hello'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<p>Only use one <code class=\"language-plaintext highlighter-rouge\">#</code>.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Prints hello\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'hello'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#block-comments"]
    },

    {
        "code": "E271",
        "message": "Multiple spaces after keyword",
        "content": "<p>There should be only one space after a keyword.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span>  <span class=\"nf\">func</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n",
        "links": []
    },

    {
        "code": "E272",
        "message": "Multiple spaces before keyword",
        "content": "<p>There should be only one space before a keyword.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p>In this example there are two spaces before the <code class=\"language-plaintext highlighter-rouge\">in</code> keyword.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">():</span>\n    <span class=\"k\">if</span> <span class=\"mi\">1</span>  <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'yep!'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">():</span>\n    <span class=\"k\">if</span> <span class=\"mi\">1</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'yep!'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n",
        "links": []
    },

    {
        "code": "E273",
        "message": "Tab after keyword",
        "content": "<p>There should be only one space after a keyword.</p>\n\n<p><strong>Note:</strong> The <code class=\"language-plaintext highlighter-rouge\">→</code> character represents a tab.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">def</span><span class=\"err\">→</span><span class=\"n\">func</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n",
        "links": []
    },

    {
        "code": "E274",
        "message": "Tab before keyword",
        "content": "<p>There should be only one space before a keyword.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p>In this example there is a tab before the <code class=\"language-plaintext highlighter-rouge\">in</code> keyword.</p>\n\n<p><strong>Note:</strong> The <code class=\"language-plaintext highlighter-rouge\">→</code> character represents a tab.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">():</span>\n    <span class=\"k\">if</span> <span class=\"mi\">1</span><span class=\"err\">→</span><span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'yep!'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<p>Use only one space before the <code class=\"language-plaintext highlighter-rouge\">in</code> operator.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">():</span>\n    <span class=\"k\">if</span> <span class=\"mi\">1</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'yep!'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n",
        "links": []
    },

    {
        "code": "E275",
        "message": "Missing whitespace after keyword",
        "content": "<p>There should be one space after keywords.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span><span class=\"p\">(</span><span class=\"n\">namedtuple</span><span class=\"p\">,</span> <span class=\"n\">defaultdict</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">namedtuple</span><span class=\"p\">,</span> <span class=\"n\">defaultdict</span><span class=\"p\">)</span>\n</code></pre></div></div>\n",
        "links": []
    },

    {
        "code": "E301",
        "message": "Expected 1 blank line, found 0",
        "content": "<p>One blank line is expected between the methods of a class.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">MyClass</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">func1</span><span class=\"p\">():</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">def</span> <span class=\"nf\">func2</span><span class=\"p\">():</span>\n        <span class=\"k\">pass</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">MyClass</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">func1</span><span class=\"p\">():</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">func2</span><span class=\"p\">():</span>\n        <span class=\"k\">pass</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#blank-lines"]
    },

    {
        "code": "E302",
        "message": "Expected 2 blank lines, found 0",
        "content": "<p>Two blank lines are expected between functions and classes.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">func1</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n<span class=\"k\">def</span> <span class=\"nf\">func2</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">func1</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">func2</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#blank-lines"]
    },

    {
        "code": "E303",
        "message": "Too many blank lines (3)",
        "content": "<p>Two blank lines are expected between functions and classes and one blank line is expected between methods of a class.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p>This example has too many blank lines.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">func1</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n\n\n\n<span class=\"k\">def</span> <span class=\"nf\">func2</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">func1</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">func2</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#blank-lines"]
    },

    {
        "code": "E304",
        "message": "Blank lines found after function decorator",
        "content": "<p>There should be no blank lines between a function decorator and the function it is decorating.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p>In this example, the <code class=\"language-plaintext highlighter-rouge\">property</code> decorator has a space between it and the <code class=\"language-plaintext highlighter-rouge\">name</code> method. The space should be removed.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"o\">@</span><span class=\"nb\">property</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"o\">@</span><span class=\"nb\">property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#blank-lines"]
    },

    {
        "code": "E305",
        "message": "Expected 2 blank lines after end of function or class",
        "content": "<p>Functions and classes should have two blank lines after them, separating them from other functions and classes.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">()</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#blank-lines"]
    },

    {
        "code": "E306",
        "message": "Expected 1 blank line before a nested definition",
        "content": "<p>Nested functions should contain 1 blank line between their definitions.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">outer</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">inner</span><span class=\"p\">():</span>\n        <span class=\"k\">pass</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">outer</span><span class=\"p\">():</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">inner</span><span class=\"p\">():</span>\n        <span class=\"k\">pass</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#blank-lines"]
    },

    {
        "code": "E401",
        "message": "Multiple imports on one line",
        "content": "<p>Imports from different modules should occur on different lines.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">collections</span><span class=\"p\">,</span> <span class=\"n\">os</span><span class=\"p\">,</span> <span class=\"n\">sys</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">collections</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#imports"]
    },

    {
        "code": "E402",
        "message": "Module level import not at top of file",
        "content": "<p>All module level imports should be at the top of the file. This means that there should be no statements in between module level imports.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p>In this example, the <code class=\"language-plaintext highlighter-rouge\">sys</code> import is not at the top of the file because <code class=\"language-plaintext highlighter-rouge\">local.setlocale</code> occurs before it.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">locale</span>\n\n<span class=\"n\">locale</span><span class=\"p\">.</span><span class=\"n\">setlocale</span><span class=\"p\">(</span><span class=\"n\">locale</span><span class=\"p\">.</span><span class=\"n\">LC_ALL</span><span class=\"p\">,</span> <span class=\"s\">'en_US.UTF-8'</span><span class=\"p\">)</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<p>Change the code so that the method call occurs after the imports.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">locale</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"n\">locale</span><span class=\"p\">.</span><span class=\"n\">setlocale</span><span class=\"p\">(</span><span class=\"n\">locale</span><span class=\"p\">.</span><span class=\"n\">LC_ALL</span><span class=\"p\">,</span> <span class=\"s\">'en_US.UTF-8'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#imports"]
    },

    {
        "code": "E501",
        "message": "Line too long (82 > 79 characters)",
        "content": "<p>Line lengths are recommended to be no greater than 79 characters. The reasoning for this comes from PEP8 itself:</p>\n\n<blockquote>\n  <p>Limiting the required editor window width makes it possible to have several files open side-by-side, and works well when using code review tools that present the two versions in adjacent columns.</p>\n</blockquote>\n\n<p>It is fairly common for developers, especially those in closed-source projects, to change the maximum line length to 100 or 120 characters.</p>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#maximum-line-length"]
    },

    {
        "code": "E502",
        "message": "The backslash is redundant between brackets",
        "content": "<p>There is no need for backslashes between brackets.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Four score and seven years ago our fathers brought '</span>\\\n      <span class=\"s\">'forth, upon this continent, a new nation, conceived '</span>\\\n      <span class=\"s\">'in liberty, and dedicated to the proposition that '</span>\\\n      <span class=\"s\">'\"all men are created equal.\"'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Four score and seven years ago our fathers brought '</span>\n      <span class=\"s\">'forth, upon this continent, a new nation, conceived '</span>\n      <span class=\"s\">'in liberty, and dedicated to the proposition that '</span>\n      <span class=\"s\">'\"all men are created equal.\"'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#maximum-line-length"]
    },

    {
        "code": "E701",
        "message": "Multiple statements on one line (colon)",
        "content": "<p>Multiple statements should be on their own separate lines. This improves readability.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">5</span><span class=\"p\">:</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">5</span><span class=\"p\">:</span>\n    <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#other-recommendations"]
    },

    {
        "code": "E702",
        "message": "Multiple statements on one line (semicolon)",
        "content": "<p>Multiple statements should not be on the same line separated by a semicolon. They should be on their own separate lines</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">gevent</span> <span class=\"kn\">import</span> <span class=\"n\">monkey</span><span class=\"p\">;</span> <span class=\"n\">monkey</span><span class=\"p\">.</span><span class=\"n\">patch_all</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">gevent</span> <span class=\"kn\">import</span> <span class=\"n\">monkey</span>\n<span class=\"n\">monkey</span><span class=\"p\">.</span><span class=\"n\">patch_all</span><span class=\"p\">()</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#other-recommendations"]
    },

    {
        "code": "E703",
        "message": "Statement ends with a semicolon",
        "content": "<p>Unlike programming languages like Java and C#, statements in Python do not need to end with a semicolon. They can be removed.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Hello world!'</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Hello world!'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#other-recommendations"]
    },

    {
        "code": "E704",
        "message": "Multiple statements on one line (def)",
        "content": "<p>Multiple statements of a function definition should be on their own separate lines.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">():</span> <span class=\"k\">pass</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#other-recommendations"]
    },

    {
        "code": "E711",
        "message": "Comparison to None should be 'cond is None:'",
        "content": "<p>Comparisons to the singleton objects, like True, False, and None, should be done with identity, not equality. Use “is” or “is not”</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"n\">var</span> <span class=\"o\">!=</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"var is not equal to True\"</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">var</span> <span class=\"o\">==</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"var is equal to None\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"n\">var</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"var is not True\"</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">var</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"var is None\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#programming-recommendations"]
    },

    {
        "code": "E712",
        "message": "Comparison to true should be 'if cond is true:' or 'if cond:'",
        "content": "<p>When comparing a variable to <code class=\"language-plaintext highlighter-rouge\">True</code>, you should use the form <code class=\"language-plaintext highlighter-rouge\">if x is True</code> or simply <code class=\"language-plaintext highlighter-rouge\">if x</code>. The most common incorrect form is <code class=\"language-plaintext highlighter-rouge\">if x == True</code>.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n<span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'True!'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n<span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"ow\">is</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'True!'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>or simply:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n<span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'True!'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#programming-recommendations"]
    },

    {
        "code": "E713",
        "message": "Test for membership should be 'not in'",
        "content": "<p>Tests for membership should use the form <code class=\"language-plaintext highlighter-rouge\">x not in the_list</code> rather than <code class=\"language-plaintext highlighter-rouge\">not x in the_list</code>. The former example is simply more readable.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">my_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"n\">my_list</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">my_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"k\">if</span> <span class=\"n\">num</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">my_list</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#programming-recommendations"]
    },

    {
        "code": "E714",
        "message": "Test for object identity should be 'is not'",
        "content": "<p>Tests for object identity should use the form <code class=\"language-plaintext highlighter-rouge\">x is not None</code> rather than <code class=\"language-plaintext highlighter-rouge\">not x is None</code>. The former example is simply more readable.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">user</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"n\">user</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#programming-recommendations"]
    },

    {
        "code": "E721",
        "message": "Do not compare types, use 'isinstance()'",
        "content": "<p>A object should be be compared to a type by using <code class=\"language-plaintext highlighter-rouge\">isinstance</code>. This is because <code class=\"language-plaintext highlighter-rouge\">isinstance</code> can handle subclasses as well.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p>The below example will not handle a potential future case where <code class=\"language-plaintext highlighter-rouge\">user</code> is a subclass or <code class=\"language-plaintext highlighter-rouge\">User</code>.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">User</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">User</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#programming-recommendations"]
    },

    {
        "code": "E722",
        "message": "Do not use bare except, specify exception instead",
        "content": "<p>When catching exceptions, mention specific exceptions whenever possible instead of using a bare <code class=\"language-plaintext highlighter-rouge\">except:</code> clause.</p>\n\n<p>A bare <code class=\"language-plaintext highlighter-rouge\">except:</code> clause will catch <code class=\"language-plaintext highlighter-rouge\">SystemExit</code> and <code class=\"language-plaintext highlighter-rouge\">KeyboardInterrupt</code> exceptions, making it harder to interrupt a program with Control-C, and can disguise other problems. If you want to catch all exceptions that signal program errors, use <code class=\"language-plaintext highlighter-rouge\">except Exception:</code> (bare except is equivalent to except BaseException:).</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p>The following code has a bare <code class=\"language-plaintext highlighter-rouge\">except:</code> clause.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">.</span><span class=\"n\">objects</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">user_id</span><span class=\"p\">)</span>\n    <span class=\"n\">user</span><span class=\"p\">.</span><span class=\"n\">send_mail</span><span class=\"p\">(</span><span class=\"s\">'Hello world'</span><span class=\"p\">)</span>\n<span class=\"k\">except</span><span class=\"p\">:</span>\n    <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s\">'An error occurred!'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<p>Instead, catch specific exceptions whenever possible.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">.</span><span class=\"n\">objects</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">user_id</span><span class=\"p\">)</span>\n    <span class=\"n\">user</span><span class=\"p\">.</span><span class=\"n\">send_mail</span><span class=\"p\">(</span><span class=\"s\">'Hello world'</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">User</span><span class=\"p\">.</span><span class=\"n\">DoesNotExist</span><span class=\"p\">:</span>\n    <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s\">'The user does not exist with that ID'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#programming-recommendations"]
    },

    {
        "code": "E731",
        "message": "Do not assign a lambda expression, use a def",
        "content": "<p>Lambdas should not be assigned to a variable. Instead, they should be defined as functions.</p>\n\n<p>The primary reason for this is debugging. Lambdas show as <code class=\"language-plaintext highlighter-rouge\">&lt;lambda&gt;</code> in tracebacks, where functions will display the function’s name.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">folder_name</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">BASE_DIR</span><span class=\"p\">,</span> <span class=\"n\">folder_name</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">root</span><span class=\"p\">(</span><span class=\"n\">folder_name</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">BASE_DIR</span><span class=\"p\">,</span> <span class=\"n\">folder_name</span><span class=\"p\">)</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#programming-recommendations"]
    },

    {
        "code": "E741",
        "message": "Do not use variables named 'I', 'O', or 'l'",
        "content": "<p>Variables named <code class=\"language-plaintext highlighter-rouge\">I</code>, <code class=\"language-plaintext highlighter-rouge\">O</code>, and <code class=\"language-plaintext highlighter-rouge\">l</code> can be very hard to read. This is because the letter <code class=\"language-plaintext highlighter-rouge\">I</code> and the letter <code class=\"language-plaintext highlighter-rouge\">l</code> are easily confused, and the letter <code class=\"language-plaintext highlighter-rouge\">O</code> and the number <code class=\"language-plaintext highlighter-rouge\">0</code> can be easily confused.</p>\n\n<p>Change the names of these variables to something more descriptive.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p>The code in this example could be misinterpreted to be <code class=\"language-plaintext highlighter-rouge\">0 * 1.08</code> (zero times one-point-eight).</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">O</span> <span class=\"o\">=</span> <span class=\"mf\">100.0</span>\n<span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"n\">O</span> <span class=\"o\">*</span> <span class=\"mf\">1.08</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<p>This example clarifies that we’re multiplying an <code class=\"language-plaintext highlighter-rouge\">order</code> variable by another number.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"mf\">100.0</span>\n<span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"n\">order</span> <span class=\"o\">*</span> <span class=\"mf\">1.08</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#names-to-avoid"]
    },

    {
        "code": "E742",
        "message": "Do not define classes named 'I', 'O', or 'l'",
        "content": "<p>Classes named <code class=\"language-plaintext highlighter-rouge\">I</code>, <code class=\"language-plaintext highlighter-rouge\">O</code>, and <code class=\"language-plaintext highlighter-rouge\">l</code> can be very hard to read. This is because the letter <code class=\"language-plaintext highlighter-rouge\">I</code> and the letter <code class=\"language-plaintext highlighter-rouge\">l</code> are easily confused, and the letter <code class=\"language-plaintext highlighter-rouge\">O</code> and the number <code class=\"language-plaintext highlighter-rouge\">0</code> can be easily confused.</p>\n\n<p>Change the names of these classes to something more descriptive.</p>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#names-to-avoid"]
    },

    {
        "code": "E743",
        "message": "Do not define functions named 'I', 'O', or 'l'",
        "content": "<p>Functions named <code class=\"language-plaintext highlighter-rouge\">I</code>, <code class=\"language-plaintext highlighter-rouge\">O</code>, and <code class=\"language-plaintext highlighter-rouge\">l</code> can be very hard to read. This is because the letter <code class=\"language-plaintext highlighter-rouge\">I</code> and the letter <code class=\"language-plaintext highlighter-rouge\">l</code> are easily confused, and the letter <code class=\"language-plaintext highlighter-rouge\">O</code> and the number <code class=\"language-plaintext highlighter-rouge\">0</code> can be easily confused.</p>\n\n<p>Change the names of these functions to something more descriptive.</p>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#names-to-avoid"]
    },

    {
        "code": "E901",
        "message": "SyntaxError or IndentationError",
        "content": "<p>The code is not in valid Python syntax.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p>This code is not valid Python.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">isNotPython</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n    <span class=\"c1\"># Syntax error!\n</span><span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">isPython</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Happily chug along\n</span></code></pre></div></div>\n",
        "links": []
    },

    {
        "code": "E902",
        "message": "IOError",
        "content": "<p>An <code class=\"language-plaintext highlighter-rouge\">IOError</code> occurred attempting to read from the source file. It is possible that the source file does not have read permissions or that it is encoded in an unknown encoding.</p>\n",
        "links": []
    },

    {
        "code": "E999",
        "message": "SyntaxError",
        "content": "<p>E999 is reported in the case of failure to compile a file into an Abstract Syntax Tree for the plugins that require it.</p>\n\n<h3 id=\"example\">Example</h3>\n\n<p>Running the following statement would report an E999 error.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Hello world)\n</span></code></pre></div></div>\n\n<h3 id=\"output\">Output</h3>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>E999 SyntaxError: EOL while scanning string literal\n</code></pre></div></div>\n",
        "links": ["https://github.com/PyCQA/flake8/blob/master/docs/source/user/error-codes.rst#L89"]
    },

    {
        "code": "F401",
        "message": "Module imported but unused",
        "content": "<p>A module has been imported but is not used anywhere in the file. The module should either be used or the import should be removed.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p>In this example, it is likely that <code class=\"language-plaintext highlighter-rouge\">namedtuple</code> was going to be used instead of a regular <code class=\"language-plaintext highlighter-rouge\">tuple</code>. However, <code class=\"language-plaintext highlighter-rouge\">namedtuple</code> was never used. It should be removed.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">namedtuple</span>\n\n<span class=\"n\">my_tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s\">'Grant'</span><span class=\"p\">,</span> <span class=\"s\">'McConnaughey'</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">my_tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s\">'Grant'</span><span class=\"p\">,</span> <span class=\"s\">'McConnaughey'</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">)</span>\n</code></pre></div></div>\n",
        "links": []
    },

    {
        "code": "F402",
        "message": "Import module from line n shadowed by loop variable",
        "content": "<p>Loop variables should not redefine the name of modules that are imported.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p>In this example the <code class=\"language-plaintext highlighter-rouge\">path</code> loop variable redefines the <code class=\"language-plaintext highlighter-rouge\">path</code> module that is imported from <code class=\"language-plaintext highlighter-rouge\">os</code>. The name of the loop variable should be changed.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">os</span> <span class=\"kn\">import</span> <span class=\"n\">path</span>\n\n<span class=\"k\">for</span> <span class=\"n\">path</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s\">'file1.py'</span><span class=\"p\">,</span> <span class=\"s\">'file2.py'</span><span class=\"p\">]:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">os</span> <span class=\"kn\">import</span> <span class=\"n\">path</span>\n\n<span class=\"k\">for</span> <span class=\"n\">file_name</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s\">'file1.py'</span><span class=\"p\">,</span> <span class=\"s\">'file2.py'</span><span class=\"p\">]:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">file_name</span><span class=\"p\">)</span>\n</code></pre></div></div>\n",
        "links": []
    },

    {
        "code": "F403",
        "message": "'from module import *' used; unable to detect undefined names",
        "content": "<p><code class=\"language-plaintext highlighter-rouge\">from module import *</code> is discouraged because the programmer often won’t know where an imported object is defined. The imported module, class, or function should be explicitly defined.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p>In the following example, it is unclear whether the <code class=\"language-plaintext highlighter-rouge\">User</code> class is defined in the <code class=\"language-plaintext highlighter-rouge\">users.models</code> module or the <code class=\"language-plaintext highlighter-rouge\">auth.models</code> module.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">users.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">auth.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">.</span><span class=\"n\">objects</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">'Grant'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">users.models</span> <span class=\"kn\">import</span> <span class=\"n\">User</span>\n<span class=\"kn\">from</span> <span class=\"nn\">auth.models</span> <span class=\"kn\">import</span> <span class=\"n\">check_password</span>\n\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">.</span><span class=\"n\">objects</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">'Grant'</span><span class=\"p\">)</span>\n<span class=\"n\">check_password</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">.</span><span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"s\">'password'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#imports"]
    },

    {
        "code": "F404",
        "message": "Future import(s) name after other statements",
        "content": "<p>Imports from <code class=\"language-plaintext highlighter-rouge\">__future__</code> should be the first imports in a file.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p>In this example, <code class=\"language-plaintext highlighter-rouge\">namedtuple</code> is imported before <code class=\"language-plaintext highlighter-rouge\">__future__.print_function</code>.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">namedtuple</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">print_function</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<p>To fix the issue we switch the order of the imports so that all <code class=\"language-plaintext highlighter-rouge\">__future__</code> imports come first.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">print_function</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">namedtuple</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#module-level-dunder-names"]
    },

    {
        "code": "F405",
        "message": "Name may be undefined, or defined from star imports: module",
        "content": "<p>This warning occurs in conjunction with issue F403, <code class=\"language-plaintext highlighter-rouge\">'from module import *' used</code>. It means that the variable <code class=\"language-plaintext highlighter-rouge\">name</code> <em>could</em> be undefined, but flake8 cannot be sure because it also <em>could</em> also be imported in the star imports.</p>\n\n<p>Confirm that the variable is defined in the star imports. If it is, explicitly import it instead of importing <code class=\"language-plaintext highlighter-rouge\">*</code>. If not, then define the variable.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">mymodule</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">print_name</span><span class=\"p\">():</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>  <span class=\"c1\"># name could be defined in mymodule\n</span></code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<p>Either explicitly import <code class=\"language-plaintext highlighter-rouge\">name</code>…</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">mymodule</span> <span class=\"kn\">import</span> <span class=\"n\">name</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">print_name</span><span class=\"p\">():</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>…or define <code class=\"language-plaintext highlighter-rouge\">name</code>.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">mymodule</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">print_name</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#imports"]
    },

    {
        "code": "F811",
        "message": "Redefinition of unused name from line n",
        "content": "<p>A module has been imported twice, and the original import is unused. One of the imports should be removed and you should ensure that it is being used in the file.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p>In this example, we import <code class=\"language-plaintext highlighter-rouge\">json</code>, then two lines down we import <code class=\"language-plaintext highlighter-rouge\">json</code> again.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n</code></pre></div></div>\n",
        "links": []
    },

    {
        "code": "F812",
        "message": "List comprehension redefines name from line n",
        "content": "<p>A list comprehension is using the same name as another variable defined in the module. Either change the variable name in the list comprehension or change it in the module.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p>In this example, the variable <code class=\"language-plaintext highlighter-rouge\">i</code> is defined as 1 then reused in the list comprehension.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">squares</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)]</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">squares</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">num</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"k\">for</span> <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)]</span>\n</code></pre></div></div>\n",
        "links": ["https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions"]
    },

    {
        "code": "F821",
        "message": "Undefined name name",
        "content": "<p>The variable <code class=\"language-plaintext highlighter-rouge\">name</code> is not defined where it is used. Define it.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">get_name</span><span class=\"p\">():</span>\n    <span class=\"c1\"># self is undefined\n</span>    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">get_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span>\n</code></pre></div></div>\n",
        "links": []
    },

    {
        "code": "F822",
        "message": "Undefined name name in __all__",
        "content": "<p>An undefined module was specified in the <code class=\"language-plaintext highlighter-rouge\">__all__</code> list. Ensure that it is specified in your file or remove the variable from <code class=\"language-plaintext highlighter-rouge\">__all__</code>.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">foo</span> <span class=\"kn\">import</span> <span class=\"n\">bar</span>\n\n<span class=\"n\">__all__</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'bar'</span><span class=\"p\">,</span> <span class=\"s\">'baz'</span><span class=\"p\">]</span>  <span class=\"c1\"># baz is undefined\n</span></code></pre></div></div>\n",
        "links": ["https://docs.python.org/3/tutorial/modules.html#importing-from-a-package"]
    },

    {
        "code": "F823",
        "message": "Local variable name ... referenced before assignment",
        "content": "<p>Local variables should be defined before the are referenced.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p>In this example, <code class=\"language-plaintext highlighter-rouge\">func</code> attempts to increment <code class=\"language-plaintext highlighter-rouge\">my_var</code> while also defining a new local variable called <code class=\"language-plaintext highlighter-rouge\">my_var</code>. It is not referencing the <code class=\"language-plaintext highlighter-rouge\">my_var</code> variable from the global namespace.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">my_var</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">():</span>\n    <span class=\"n\">my_var</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<p>In this example, we use the <code class=\"language-plaintext highlighter-rouge\">global</code> statement to indicate that the function <code class=\"language-plaintext highlighter-rouge\">func</code> should work on the variable <code class=\"language-plaintext highlighter-rouge\">my_var</code> from the global namespace.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">my_var</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">():</span>\n    <span class=\"k\">global</span> <span class=\"n\">my_var</span>\n    <span class=\"n\">my_var</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n</code></pre></div></div>\n",
        "links": []
    },

    {
        "code": "F831",
        "message": "Duplicate argument name in function definition",
        "content": "<p>Two or more parameters in a function definition have the same name. All names in the function definition should be distinct.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">format_name</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"p\">,</span> <span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s\">'Grant'</span><span class=\"p\">):</span>\n    <span class=\"c1\"># first_name is declared twice\n</span>    <span class=\"k\">pass</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">format_name</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n",
        "links": []
    },

    {
        "code": "F841",
        "message": "Local variable name is assigned to but never used",
        "content": "<p>A local variable in your function was defined but is not being used. This local variable should be removed.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">full_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"c1\"># name is defined but not used\n</span>    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">first_name</span> <span class=\"o\">+</span> <span class=\"s\">' '</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">last_name</span>\n    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">first_name</span>\n</code></pre></div></div>\n",
        "links": []
    },

    {
        "code": "F901",
        "message": "raise NotImplemented should be raise NotImplementedError",
        "content": "<p><code class=\"language-plaintext highlighter-rouge\">NotImplemented</code> is a special value which should be returned by the binary special methods to indicate that the operation is not implemented with respect to the other type. Raise <code class=\"language-plaintext highlighter-rouge\">NotImplementedError</code> to indicate that a super-class method is not implemented and that child classes should implement it.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">BaseClass</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">abstract_method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"nb\">NotImplemented</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">BaseClass</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">abstract_method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"nb\">NotImplementedError</span>\n</code></pre></div></div>\n",
        "links": []
    },

    {
        "code": "W191",
        "message": "Indentation contains tabs",
        "content": "<p>Indentation has tabs when only spaces are expected. Change all tabs to spaces.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p><strong>Note:</strong> <code class=\"language-plaintext highlighter-rouge\">→</code> represents a tab.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">get_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">first_name</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">last_name</span><span class=\"p\">:</span>\n    <span class=\"err\">→</span> <span class=\"err\">→</span> <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">first_name</span> <span class=\"o\">+</span> <span class=\"s\">' '</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">last_name</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">last_name</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<p>Use spaces only.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">get_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">first_name</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">last_name</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">first_name</span> <span class=\"o\">+</span> <span class=\"s\">' '</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">last_name</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">last_name</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#tabs-or-spaces"]
    },

    {
        "code": "W291",
        "message": "Trailing whitespace",
        "content": "<p>There should be no whitespace after the final character in a line.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p><strong>Note:</strong> The <code class=\"language-plaintext highlighter-rouge\">•</code> character represents a space.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">first_func</span><span class=\"p\">():</span>\n    <span class=\"c1\"># The line below has two spaces after its final character\n</span>    <span class=\"k\">pass</span><span class=\"err\">••</span>\n</code></pre></div></div>\n",
        "links": []
    },

    {
        "code": "W292",
        "message": "No newline at end of file",
        "content": "<p>Files should end with a newline.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p>Imagine the example below is an entire file.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"n\">BASE_DIR</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"n\">__file__</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<h3 id=\"best-practice\">Best practice</h3>\n\n<p>Imagine the example below is an entire file.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"n\">BASE_DIR</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"n\">__file__</span><span class=\"p\">))</span>\n<span class=\"c1\"># This is a new line that ends the file.\n</span></code></pre></div></div>\n",
        "links": []
    },

    {
        "code": "W293",
        "message": "Blank line contains whitespace",
        "content": "<p>Blank lines should not contain any tabs or spaces.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p><strong>Note:</strong> The <code class=\"language-plaintext highlighter-rouge\">•</code> character represents a space.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">first_func</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n<span class=\"err\">••••</span>  <span class=\"c1\"># This line contains four spaces\n</span>\n<span class=\"k\">def</span> <span class=\"nf\">second_func</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">first_func</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">second_func</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n",
        "links": []
    },

    {
        "code": "W391",
        "message": "Blank line at end of file",
        "content": "<p>There should be one, and only one, blank line at the end of each file. This warning will occur when there are zero, two, or more than two blank lines.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p>Imagine the example below is an entire file.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">MyClass</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">MyClass</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n",
        "links": []
    },

    {
        "code": "W503",
        "message": "Line break occurred before a binary operator",
        "content": "<p>Line breaks should occur after the binary operator to keep all variable names aligned.</p>\n\n<p>This rule goes against the PEP 8 recommended style, which was changed on April 16th, 2016 in <a href=\"https://github.com/python/peps/commit/c59c4376ad233a62ca4b3a6060c81368bd21e85b\">this commit</a>. The tool <a href=\"https://github.com/PyCQA/pycodestyle/pull/502\">will soon be updated</a> to recommend the opposite: line breaks <em>should</em> occur before the binary operator because it keeps all operators aligned.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<p><strong>Note:</strong> Despite being in the anti-pattern section, this will soon be considered the best practice.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">income</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">gross_wages</span>\n          <span class=\"o\">+</span> <span class=\"n\">taxable_interest</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<p><strong>Note:</strong> Despite being in the best practice section, this will soon be considered an anti-pattern.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">income</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">gross_wages</span> <span class=\"o\">+</span>\n          <span class=\"n\">taxable_interest</span><span class=\"p\">)</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#should-a-line-break-before-or-after-a-binary-operator"]
    },

    {
        "code": "W504",
        "message": "Line break occurred after a binary operator",
        "content": "<p>Line breaks should occur before the binary operator to keep all operators aligned.</p>\n\n<p>This rule was changed on April 16th, 2016 in <a href=\"https://github.com/python/peps/commit/c59c4376ad233a62ca4b3a6060c81368bd21e85b\">this commit</a>.  The tool <a href=\"https://github.com/PyCQA/pycodestyle/pull/502\">is updated</a> to recommend that line breaks <em>should</em> occur before the binary operator because it keeps all operators aligned. However older versions of tooling can still recommend the previous behaviour. See also W503.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">income</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">gross_wages</span> <span class=\"o\">+</span>\n          <span class=\"n\">taxable_interest</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">income</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">gross_wages</span>\n          <span class=\"o\">+</span> <span class=\"n\">taxable_interest</span><span class=\"p\">)</span>\n</code></pre></div></div>\n",
        "links": ["https://www.python.org/dev/peps/pep-0008/#should-a-line-break-before-or-after-a-binary-operator"]
    },

    {
        "code": "W601",
        "message": ".has_key() is deprecated, use 'in'",
        "content": "<p><code class=\"language-plaintext highlighter-rouge\">.has_key()</code> was deprecated in Python 2. It is recommended to use the <code class=\"language-plaintext highlighter-rouge\">in</code> operator instead.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">my_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'hello'</span><span class=\"p\">:</span> <span class=\"s\">'world'</span><span class=\"p\">}</span>\n<span class=\"k\">if</span> <span class=\"n\">my_dict</span><span class=\"p\">.</span><span class=\"n\">has_key</span><span class=\"p\">(</span><span class=\"s\">'hello'</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'It works!'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">my_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'hello'</span><span class=\"p\">:</span> <span class=\"s\">'world'</span><span class=\"p\">}</span>\n<span class=\"k\">if</span> <span class=\"s\">'hello'</span> <span class=\"ow\">in</span> <span class=\"n\">my_dict</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'It works!'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n",
        "links": ["https://docs.python.org/2/library/stdtypes.html#dict.has_key"]
    },

    {
        "code": "W602",
        "message": "Deprecated form of raising exception",
        "content": "<p>The <code class=\"language-plaintext highlighter-rouge\">raise Exception, message</code> form of raising exceptions is deprecated. Use the new form.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">can_drive</span><span class=\"p\">(</span><span class=\"n\">age</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">age</span> <span class=\"o\">&lt;</span> <span class=\"mi\">16</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"nb\">ValueError</span><span class=\"p\">,</span> <span class=\"s\">'Not old enough to drive'</span>\n    <span class=\"k\">return</span> <span class=\"bp\">True</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">can_drive</span><span class=\"p\">(</span><span class=\"n\">age</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">age</span> <span class=\"o\">&lt;</span> <span class=\"mi\">16</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"nb\">ValueError</span><span class=\"p\">(</span><span class=\"s\">'Not old enough to drive'</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"bp\">True</span>\n</code></pre></div></div>\n",
        "links": []
    },

    {
        "code": "W603",
        "message": "'<>' is deprecated, use '!='",
        "content": "<p><code class=\"language-plaintext highlighter-rouge\">&lt;&gt;</code> has been deprecated and removed in Python 3. Replace instances of <code class=\"language-plaintext highlighter-rouge\">&lt;&gt;</code> with <code class=\"language-plaintext highlighter-rouge\">!=</code>.</p>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">assert</span> <span class=\"s\">'test'</span> <span class=\"o\">!=</span> <span class=\"s\">'testing'</span>\n</code></pre></div></div>\n",
        "links": ["https://docs.python.org/2/library/stdtypes.html#index-9"]
    },

    {
        "code": "W604",
        "message": "Backticks are deprecated, use 'repr()'",
        "content": "<p>Backticks were deprecated and removed in Python 3. Use the built-in function <code class=\"language-plaintext highlighter-rouge\">repr()</code> instead.</p>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">MyObj</span><span class=\"p\">()</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">))</span>\n</code></pre></div></div>\n",
        "links": ["https://docs.python.org/3.0/whatsnew/3.0.html#removed-syntax"]
    },

    {
        "code": "W605",
        "message": "Invalid escape sequence 'x'",
        "content": "<p>As of Python 3.6, a backslash-character pair that is not a valid escape sequence now generates a <code class=\"language-plaintext highlighter-rouge\">DeprecationWarning</code>. This will eventually become a <code class=\"language-plaintext highlighter-rouge\">SyntaxError</code>.</p>\n\n<h3 id=\"anti-pattern\">Anti-pattern</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">regex</span> <span class=\"o\">=</span> <span class=\"s\">'\\.png$'</span>\n</code></pre></div></div>\n\n<h3 id=\"best-practice\">Best practice</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">regex</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s\">'\\.png$'</span>\n</code></pre></div></div>\n",
        "links": ["https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals","https://docs.python.org/3/whatsnew/3.6.html#deprecated-python-behavior"]
    }

]